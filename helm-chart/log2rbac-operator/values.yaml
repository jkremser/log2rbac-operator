# Default values for log2rbac-operator.


# chart specific
nameOverride: ""
fullnameOverride: ""

# what should be deployed
deploy:
  # -- whether the rbac resources should be also deployed (ServiceAccount, ClusterRole, ClusterRoleBinding)
  rbac: true
  # -- whether the operator itself should be deployed (Deployment)
  operator: true
  # -- whether the service for metrics and open-telemetry should be deployed (Service)
  service: true
  # -- whether the jaeger should be deployed with the operator (use together with `tracing.enabled = true`)
  jaeger: false

image:
  # -- container image repo (can be prepended by image registry)
  repository: jkremser/log2rbac

  # -- translates to pod's `spec.imagePullPolicy`
  pullPolicy: Always

  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

metrics:
  # -- should the metrics be enabled (additional arg for log2rbac binary)
  enabled: true

  # -- on which port the metrics server should listen
  port: 8080

  # -- typeof the service for metrics (ClusterIP, NodePort, LoadBalancer). Consult https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  serviceType: NodePort

  # -- Port on node that will be used for metrics. This make sense only for serviceType = NodePort, otherwise it's ignored
  nodePort: 30081

tracing:
  # -- if the application should be sending the traces to OTLP collector (env var `TRACING_ENABLED`)
  enabled: false

  # -- `host:port` where the spans (traces) should be sent, sets the `OTEL_EXPORTER_OTLP_ENDPOINT` env var
  endpoint: localhost:4318

  # -- float representing the ratio of how often the span should be kept/dropped (env var `TRACING_SAMPLING_RATIO`)
  # if not specified, the AlwaysSample will be used which is the same as 1.0. `0.1` would mean that 10% of samples will be kept
  samplingRatio: null

  sidecarImage:
    # -- OpenTelemetry collector into which the log2rbac operator sends the spans. It can be further configured to send its data
    # to somewhere else using exporters (Jaeger for instance)
    repository: otel/opentelemetry-collector
    tag: 0.48.0
    pullPolicy: Always
  
  jaegerImage:
    # -- if `deploy.jaeger==true` this image will be used in the deployment for Jaeger
    repository: jaegertracing/all-in-one
    tag: 1.33.0
    pullPolicy: Always

# operator specific settings
operator:
  # -- should the logs be colorcul (env var `COLORS`)
  colors: true
  # -- should the ascii logo be printed in the logs (env var `NO_BANNER`)
  noBanner: false

  # -- whether the operator should be restarting the pods after modifying the role (env var `SHOULD_RESTART_APP_PODS`)
  # if not set defaults to `true`
  restartPods : true

  syncIntervals:
    # -- if no rbac related entry was found in logs, how long to wait for the next check (env var `SYNC_INTERVAL_AFTER_NO_RBAC_ENTRY_MINUTES`)
    # value represents the number of minutes
    afterNoRbacEntry: 5

    # -- if it was not possible to get the logs, how long to wait for the next check (env var `SYNC_INTERVAL_AFTER_NO_LOGS_SECONDS`)
    # value represents the number of seconds
    afterNoLogs: 30

    # -- how long to wait after rbac entry was added and pod was restarted by the operator (env var `SYNC_INTERVAL_AFTER_POD_RESTART_SECONDS`)
    # value represents the number of seconds
    afterPodRestart: 20

# -- additional annotations that will be applied on operator's pod
podAnnotations: {}

# -- additional labels that will be applied on operator's pod
podLabels: {}

imagePullSecrets: []
podSecurityContext:
  # runAsNonRoot: true

securityContext:
  # -- For more options consult https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#securitycontext-v1-core
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  # runAsNonRoot: true

# resource definitions for operator's pod
# see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources:
  limits:
    cpu: 500m
    memory: 128Mi
  requests:
    cpu: 10m
    memory: 64Mi

# -- https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeSelector: {}

# -- https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
tolerations: []

# -- https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
affinity: {}

name: Release

on:
  push:
    tags:
      - "v*"

env:
  GOLANG_VERSION: 1.19.1

jobs:
  release:
    name: Release & Sign images
    runs-on: ubuntu-20.04
    outputs:
      container_tags: ${{ steps.container_info.outputs.container_tags }}
      container_info: ${{ steps.container_info.outputs.container_info }}
      container_repos: ${{ steps.container_info.outputs.container_repos }}
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          fetch-depth: 0

      - name: Get tag
        id: get_tag
        run: |
          previous_tag=$(git tag --sort=v:refname | tail -2 | head -1)
          echo "::set-output name=previous_tag::${previous_tag}"

      - name: Set up Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4
        with:
          go-version: ${{ env.GOLANG_VERSION }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@4079ad3567a89f68395480299c77e40170430341
        with:
          cosign-release: 'v1.12.1'

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@fd74a6fb98a204a1ad35bbfae0122c1a302ff88b # v0.15.0

      - name: Install signing key
        run: |
          echo '${{ secrets.COSIGN_PRIVATE_KEY }}' > cosign.key

      - name: Login to Dockerhub
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to ghcr.io
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@8f67e590f2d095516493f017008adc464e63adb1 # v4
        with:
          version: v1.9.2
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASER_TOKEN }}

      - name: Get container info
        id: container_info
        run: |
          function digest_tags {
            while IFS= read -r line ; do
              jq -n "{digest: \"$line\", tags: \$ARGS.positional}" --args $(make container-tags CONTAINER_DIGEST=$line)
            done <<< "$(make manifest-digest GITHUB_REF=${{ github.ref_name }})"
          }
          CONTAINER_INFO="$(digest_tags | jq --slurp . -c)"
          CONTAINER_DIGEST="$(echo ${CONTAINER_INFO} | jq --raw-output '.[0].digest')"
          CONTAINER_REPOS="$(make container-repos CONTAINER_DIGEST=${CONTAINER_DIGEST} | jq --raw-input . | jq --slurp -c)"
          CONTAINER_TAGS=$(echo ${CONTAINER_INFO} | jq --raw-output '[.[].tags[]] | join(" ")')
          set | grep 'CONTAINER_'
          echo "::set-output name=container_info::$CONTAINER_INFO"
          echo "::set-output name=container_repos::$CONTAINER_REPOS"
          echo "::set-output name=container_tags::$CONTAINER_TAGS"

      - name: Cleanup signing keys
        if: ${{ always() }}
        run: rm -f cosign.key

  sbom:
    name: sbom
    needs: [release]
    runs-on: ubuntu-20.04
    env:
      TAGS: "${{ needs.release.outputs.container_tags }}"

    strategy:
      matrix:
        repo: ${{ fromJSON(needs.release.outputs.container_repos) }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Install cosign
        uses: sigstore/cosign-installer@9becc617647dfa20ae7b1151972e9b3a2c338a2b # tag=v2.8.1
        with:
          cosign-release: 'v1.12.1'

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@fd74a6fb98a204a1ad35bbfae0122c1a302ff88b # v0.15.0
      - name: Login to Dockerhub
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to ghcr.io
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Attach SBOM
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo '${{ secrets.COSIGN_PUBLIC_KEY }}' > cosign.pub
          echo '${{ secrets.COSIGN_PRIVATE_KEY }}' > cosign.key
          for t in `echo ${TAGS}`; do
            cosign verify --key cosign.pub ${{ matrix.repo }}:${t}
            syft ${{ matrix.repo }}:${t} -o spdx-json > sbom-spdx.json
            cosign attest --predicate sbom-spdx.json --type spdx --key cosign.key ${{ matrix.repo }}:${t}
            cosign verify-attestation -o verified-sbom-spdx.json --type spdx --key cosign.pub ${{ matrix.repo }}:${t}
          done
      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f cosign.key

  provenance:
    name: provenance
    needs: [release]
    runs-on: ubuntu-20.04
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Generate provenance for Release
        uses: philips-labs/slsa-provenance-action@752766b8a3b1ebd09d599e163eeec8fa39e677aa # tag=v0.8.0
        id: provenance-step
        with:
          command: generate
          subcommand: github-release
          arguments: --artifact-path release-assets --output-path provenance.att --tag-name ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Check if uploading provenance failed
        if: ${{ always() }}
        run: |
          [ "x${{steps.provenance-step.outcome}}" == "xfailure" ] && echo ":x: Uploading provenance for release failed, make sure to delete all the previous releases in GitHub web api before releasing." > "$GITHUB_STEP_SUMMARY" || true

      - name: Install cosign
        uses: sigstore/cosign-installer@9becc617647dfa20ae7b1151972e9b3a2c338a2b # tag=v2.8.1
        with:
          cosign-release: 'v1.12.1'

      - name: Sign provenance
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          SIGNATURE: provenance.att.sig
        run: |
          echo '${{ secrets.COSIGN_PRIVATE_KEY }}' > cosign.key
          cosign sign-blob --key cosign.key --output-signature "${SIGNATURE}" provenance.att
          cat "${SIGNATURE}"
          curl_args=(-s -H "Authorization: token ${GITHUB_TOKEN}")
          curl_args+=(-H "Accept: application/vnd.github.v3+json")
          release_id="$(curl "${curl_args[@]}" "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases?per_page=10" | jq "map(select(.name == \"${GITHUB_REF_NAME}\"))" | jq -r '.[0].id')"
          echo "Upload ${SIGNATURE} to release with id ${release_id}â€¦"
          curl_args+=(-H "Content-Type: $(file -b --mime-type "${SIGNATURE}")")
          curl "${curl_args[@]}" \
            --data-binary @"${SIGNATURE}" \
            "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${release_id}/assets?name=${SIGNATURE}"

  container-provenance:
    name: container-provenance
    needs: [release]
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        repo: ${{ fromJSON(needs.release.outputs.container_repos) }}
        container: ${{ fromJSON(needs.release.outputs.container_info) }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Install cosign
        uses: sigstore/cosign-installer@9becc617647dfa20ae7b1151972e9b3a2c338a2b # tag=v2.8.1
        with:
          cosign-release: 'v1.12.1'

      - name: Generate provenance for ${{ matrix.repo }}
        uses: philips-labs/slsa-provenance-action@752766b8a3b1ebd09d599e163eeec8fa39e677aa # tag=v0.8.0
        with:
          command: generate
          subcommand: container
          arguments: --repository ${{ matrix.repo }} --output-path provenance.att --digest ${{ matrix.container.digest }} --tags ${{ join(matrix.container.tags, ',') }} }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Get slsa-provenance predicate
        run: |
          cat provenance.att | jq .predicate > provenance-predicate.att
      - name: Login to Dockerhub
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to ghcr.io
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Attach provenance to image
        run: |
          echo '${{ secrets.COSIGN_PRIVATE_KEY }}' > cosign.key
          cosign attest --predicate provenance-predicate.att --type slsaprovenance --key cosign.key ${{ matrix.repo }}@${{ matrix.container.digest }}
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Verify attestation
        run: |
          echo '${{ secrets.COSIGN_PUBLIC_KEY }}' > cosign.pub
          cosign verify-attestation --key cosign.pub --type slsaprovenance ${{ matrix.repo }}@${{ matrix.container.digest }}
      - name: Cleanup
        if: ${{ always() }}
        run: |
          rm -f cosign.key

  crds:
    needs: [sbom, provenance, container-provenance]
    name: Ping doc.crds.dev
    runs-on: ubuntu-20.04
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Send http get to doc.crds.dev to index a new version
        run: |
          curl -sL https://doc.crds.dev/github.com/${GITHUB_REPOSITORY}@${{ github.ref_name }} | grep -A2 'class="container"'

  slsa-summary:
    name: Summary
    needs: [crds, release]
    runs-on: ubuntu-20.04
    env:
      TAGS: "${{ needs.release.outputs.container_tags }}"
      REPOS: "${{ join(fromJSON(needs.release.outputs.container_repos), ' ') }}"
      CONTAINER_INFO: "${{ needs.release.outputs.container_info }}"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Make summary for the pipeline
        run: |
          {
            echo "# :seedling: Release Summary"
            echo "- version: [${{ github.ref_name }}](https://github.com/${GITHUB_REPOSITORY}/tree/${{ github.ref_name }})"
            echo '- git sha: [`'$(echo ${GITHUB_SHA} | cut -c1-8)'`](https://github.com/jkremser/log2rbac-operator/commit/'${GITHUB_SHA}')'
            echo '- SCM: [:octocat:`'/jkremser/log2rbac-operator'`](https://github.com/jkremser/log2rbac-operator)'
            echo "- self reference: [action run :running: #${{ github.run_id }}](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }})"
            echo "- release page: [${{ github.ref_name }}](https://github.com/${GITHUB_REPOSITORY}/releases/tag/${{ github.ref_name }})"
            echo "- this github workflow (code): [ci.yaml](https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_SHA}/.github/workflows/ci.yaml)"
            echo "- container images at dockerhub: [docker.io/jkremser/log2rbac](https://hub.docker.com/r/jkremser/log2rbac/tags)"
            echo "- container images at ghcr.io: [ghcr.io/jkremser/log2rbac](https://github.com/${GITHUB_REPOSITORY}/pkgs/container/log2rbac)"
            echo ""
            echo "## :closed_lock_with_key: Secure Software Supply Chain"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"
          
          for repo in `echo ${REPOS}`; do
            [[ ${repo} == jkremser/* ]] && repo="docker.io/${repo}"
            for tag in `echo ${TAGS}`; do
              img="${repo}:${tag}"
              digest=$(echo $CONTAINER_INFO | jq "map(select(.tags[] | contains(\"${tag}\"))) | .[].digest")
              {
                echo '### Container image `'${img}'`'
                echo ':lock: Image is signed. You can verify it with the following command:'
                echo '```bash'
                echo "cosign verify --key cosign.pub ${img}"
                echo '```'
                echo ":scroll: SBOM file is attested. You can verify it with the following command:"
                echo '```bash'
                echo "cosign verify-attestation --key cosign.pub --type spdx ${img} \\"
                echo " | jq '.payload |= @base64d | .payload | fromjson | select( .predicateType==\"https://spdx.dev/Document\" ) | .predicate.Data | fromjson | .'"
                echo '```'
                echo ":green_book: SLSA Provenance file is attested. You can verify it with the following command:"
                echo '```bash'
                echo "cosign verify-attestation --key cosign.pub --type slsaprovenance ${repo}@${digest} \\"
                echo " | jq '.payload |= @base64d | .payload | fromjson | select(.predicateType==\"https://slsa.dev/provenance/v0.2\" ) | .'"
                echo '```'
                echo "---"
              } >> "$GITHUB_STEP_SUMMARY"
            done
          done
          {
            echo "**NOTE**"
            echo
            echo 'Instead of using `--key cosign.pub` that requires having the public key locally present, you can alternatively use:'
            echo '```bash'
            echo "cosign verify --key https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${{ github.ref_name }}/cosign.pub \${image}"
            echo '```'
            echo
            echo "---"
          } >> "$GITHUB_STEP_SUMMARY"
